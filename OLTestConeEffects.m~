% Ask user to enter filename, load data
fName = input('Enter match filename: ');
load(fName);
if (exist('p1', 'var') == 0 || exist('p2', 'var') == 0 ||...
        exist('test', 'var') == 0 || exist('matches', 'var') == 0)
    error('Passed file does not contain required variables'); 
end 

% Get calibration information 
cal = OLGetCalibrationStructure;


% Generate standard cone fundamentals for observer
lambdaMaxes = [558.9 530.3 420.7]';     % Normal trichromat
dphotopigments = [0 0 0]';
T_cones = findConeFundamentals(lambdaMaxes, dphotopigments);

% Calculate sizes and initialize spd arrays  
[row, col] = size(matches); 
S = [380 1 401];
wls = SToWls(S);
primariesSpectrum = zeros(length(wls), row); 
testSpectrum = zeros(length(wls), row); 



matchSpectrum1 = zeros(length(wls)); matchSpectrum1(matchIndex1) = matchIntensity1;
matchSpectrum2 = zeros(size(wls)); matchSpectrum2(matchIndex2) = matchIntensity2;



[spdLength, ~] =  size(cal.computed.pr650M);

fullWidthHalfMax = 20;

for i = 1:row 
    % For each match, find primary and test spds 
    p1Spd = OLMakeMonochromaticSpd(cal, p1, fullWidthHalfMax)/3;
    p2Spd = OLMakeMonochromaticSpd(cal, p2, fullWidthHalfMax)/3;
    spdPrimaries(:,i) = (matches(i,2) * p1Spd) +...
        ((1 - matches(i,2)) * p2Spd);
    spdTest(:,i) = matches(i,1) * ...
        OLMakeMonochromaticSpd(cal, test, fullWidthHalfMax)/3;
    
    % Calculate effects of the spds on cones
    
end 


    
    % load OLSampleMatches11_14_DB.mat;
    % DBMatches = matches;
    % load OLSampleMatches11_14_DE.mat;
    % DEMatches = matches;